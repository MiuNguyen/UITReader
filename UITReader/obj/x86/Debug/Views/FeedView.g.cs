#pragma checksum "E:\Tài liệu môn học\Năm 3 - HKII\Chuyên đề mobile\UIT READER\UIT READER\UITReader\Views\FeedView.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "B20388D3FCC21829B435BDFFD749DF6F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UITReader.Views
{
    partial class FeedView : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ListViewBase_CanReorderItems(global::Windows.UI.Xaml.Controls.ListViewBase obj, global::System.Boolean value)
            {
                obj.CanReorderItems = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Nullable<global::System.Boolean>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Nullable<global::System.Boolean>), targetNullValue);
                }
                obj.IsChecked = value;
            }
        };

        private class FeedView_obj2_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFeedView_Bindings
        {
            private global::UITReader.ViewModels.ArticleViewModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj3;
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;
            private global::Windows.UI.Xaml.Controls.TextBlock obj5;
            private global::Windows.UI.Xaml.Controls.TextBlock obj6;

            private FeedView_obj2_BindingsTracking bindingsTracking;

            public FeedView_obj2_Bindings()
            {
                this.bindingsTracking = new FeedView_obj2_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3:
                        this.obj3 = (global::Windows.UI.Xaml.Controls.Primitives.ToggleButton)target;
                        (this.obj3).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.IsStarred = (this.obj3).IsChecked;
                                }
                            });
                        break;
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 6:
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::UITReader.ViewModels.ArticleViewModel data = args.NewValue as global::UITReader.ViewModels.ArticleViewModel;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::UITReader.ViewModels.ArticleViewModel was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::UITReader.ViewModels.ArticleViewModel);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UITReader.ViewModels.ArticleViewModel) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IFeedView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // FeedView_obj2_Bindings

            public void SetDataRoot(global::UITReader.ViewModels.ArticleViewModel newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UITReader.ViewModels.ArticleViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_IsStarred(obj.IsStarred, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_PublishedDateFormatted(obj.PublishedDateFormatted, phase);
                        this.Update_Title(obj.Title, phase);
                        this.Update_Summary(obj.Summary, phase);
                    }
                }
            }
            private void Update_IsStarred(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj3, obj, null);
                }
            }
            private void Update_PublishedDateFormatted(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                }
            }
            private void Update_Title(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                }
            }
            private void Update_Summary(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                }
            }

            private class FeedView_obj2_BindingsTracking
            {
                global::System.WeakReference<FeedView_obj2_Bindings> WeakRefToBindingObj; 

                public FeedView_obj2_BindingsTracking(FeedView_obj2_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<FeedView_obj2_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    FeedView_obj2_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::UITReader.ViewModels.ArticleViewModel obj = sender as global::UITReader.ViewModels.ArticleViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_IsStarred(obj.IsStarred, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsStarred":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsStarred(obj.IsStarred, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::UITReader.ViewModels.ArticleViewModel obj)
                {
                    FeedView_obj2_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class FeedView_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFeedView_Bindings
        {
            private global::UITReader.Views.FeedView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Grid obj7;
            private global::Windows.UI.Xaml.Visibility obj7VisibilityDeferredValue;
            private global::Windows.UI.Xaml.Controls.Grid obj8;
            private global::Windows.UI.Xaml.Controls.Grid obj9;
            private global::UITReader.Controls.NavMenuListView obj10;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.Grid obj12;
            private global::Windows.UI.Xaml.Visibility obj12VisibilityDeferredValue;
            private global::Windows.UI.Xaml.Controls.Grid obj13;
            private global::Windows.UI.Xaml.Controls.TextBlock obj14;

            private FeedView_obj1_BindingsTracking bindingsTracking;

            public FeedView_obj1_Bindings()
            {
                this.bindingsTracking = new FeedView_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 7:
                        this.obj7 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj7, this.obj7VisibilityDeferredValue);
                        break;
                    case 8:
                        this.obj8 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 9:
                        this.obj9 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 10:
                        this.obj10 = (global::UITReader.Controls.NavMenuListView)target;
                        (this.obj10).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ViewModel.CurrentArticleAsObject = (this.obj10).SelectedItem;
                                }
                            });
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 12:
                        this.obj12 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj12, this.obj12VisibilityDeferredValue);
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            // IFeedView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // FeedView_obj1_Bindings

            public void SetDataRoot(global::UITReader.Views.FeedView newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UITReader.Views.FeedView obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::UITReader.ViewModels.MainViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CurrentFeed(obj.CurrentFeed, phase);
                        this.Update_ViewModel_CurrentArticleAsObject(obj.CurrentArticleAsObject, phase);
                        this.Update_ViewModel_IsCurrentFeedFavoritesFeed(obj.IsCurrentFeedFavoritesFeed, phase);
                    }
                }
            }
            private void Update_ViewModel_CurrentFeed(global::UITReader.ViewModels.FeedViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_CurrentFeed(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CurrentFeed_IsInError(obj.IsInError, phase);
                        this.Update_ViewModel_CurrentFeed_IsEmpty(obj.IsEmpty, phase);
                        this.Update_ViewModel_CurrentFeed_IsNotEmptyOrInError(obj.IsNotEmptyOrInError, phase);
                        this.Update_ViewModel_CurrentFeed_ArticlesAsObject(obj.ArticlesAsObject, phase);
                        this.Update_ViewModel_CurrentFeed_Name(obj.Name, phase);
                        this.Update_ViewModel_CurrentFeed_IsFavoritesFeed(obj.IsFavoritesFeed, phase);
                        this.Update_ViewModel_CurrentFeed_IsNotFavoritesOrInError(obj.IsNotFavoritesOrInError, phase);
                    }
                }
            }
            private void Update_ViewModel_CurrentFeed_IsInError(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (this.obj7 != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj7, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                    else
                    {
                        this.obj7VisibilityDeferredValue = (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null);
                    }
                }
            }
            private void Update_ViewModel_CurrentFeed_IsEmpty(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj8, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), "Reverse", null));
                }
            }
            private void Update_ViewModel_CurrentFeed_IsNotEmptyOrInError(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_CurrentFeed_ArticlesAsObject(global::System.Object obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj10, obj, null);
                }
            }
            private void Update_ViewModel_CurrentArticleAsObject(global::System.Object obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj10, obj, null);
                }
            }
            private void Update_ViewModel_IsCurrentFeedFavoritesFeed(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ListViewBase_CanReorderItems(this.obj10, obj);
                }
            }
            private void Update_ViewModel_CurrentFeed_Name(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj, null);
                }
            }
            private void Update_ViewModel_CurrentFeed_IsFavoritesFeed(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    if (this.obj12 != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj12, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                    else
                    {
                        this.obj12VisibilityDeferredValue = (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null);
                    }
                }
            }
            private void Update_ViewModel_CurrentFeed_IsNotFavoritesOrInError(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj13, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }

            private class FeedView_obj1_BindingsTracking
            {
                global::System.WeakReference<FeedView_obj1_Bindings> WeakRefToBindingObj; 

                public FeedView_obj1_BindingsTracking(FeedView_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<FeedView_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_CurrentFeed(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    FeedView_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::UITReader.ViewModels.MainViewModel obj = sender as global::UITReader.ViewModels.MainViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ViewModel_CurrentFeed(obj.CurrentFeed, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentArticleAsObject(obj.CurrentArticleAsObject, DATA_CHANGED);
                                    bindings.Update_ViewModel_IsCurrentFeedFavoritesFeed(obj.IsCurrentFeedFavoritesFeed, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CurrentFeed":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed(obj.CurrentFeed, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentArticleAsObject":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentArticleAsObject(obj.CurrentArticleAsObject, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCurrentFeedFavoritesFeed":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsCurrentFeedFavoritesFeed(obj.IsCurrentFeedFavoritesFeed, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UITReader.ViewModels.MainViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::UITReader.ViewModels.MainViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_CurrentFeed(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    FeedView_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::UITReader.ViewModels.FeedViewModel obj = sender as global::UITReader.ViewModels.FeedViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ViewModel_CurrentFeed_IsInError(obj.IsInError, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentFeed_IsEmpty(obj.IsEmpty, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentFeed_IsNotEmptyOrInError(obj.IsNotEmptyOrInError, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentFeed_ArticlesAsObject(obj.ArticlesAsObject, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentFeed_Name(obj.Name, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentFeed_IsFavoritesFeed(obj.IsFavoritesFeed, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentFeed_IsNotFavoritesOrInError(obj.IsNotFavoritesOrInError, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsInError":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_IsInError(obj.IsInError, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEmpty":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_IsEmpty(obj.IsEmpty, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsNotEmptyOrInError":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_IsNotEmptyOrInError(obj.IsNotEmptyOrInError, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ArticlesAsObject":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_ArticlesAsObject(obj.ArticlesAsObject, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsFavoritesFeed":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_IsFavoritesFeed(obj.IsFavoritesFeed, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsNotFavoritesOrInError":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_IsNotFavoritesOrInError(obj.IsNotFavoritesOrInError, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UITReader.ViewModels.FeedViewModel cache_ViewModel_CurrentFeed = null;
                public void UpdateChildListeners_ViewModel_CurrentFeed(global::UITReader.ViewModels.FeedViewModel obj)
                {
                    if (obj != cache_ViewModel_CurrentFeed)
                    {
                        if (cache_ViewModel_CurrentFeed != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_CurrentFeed).PropertyChanged -= PropertyChanged_ViewModel_CurrentFeed;
                            cache_ViewModel_CurrentFeed = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_CurrentFeed = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_CurrentFeed;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3:
                {
                    global::Windows.UI.Xaml.Controls.Primitives.ToggleButton element3 = (global::Windows.UI.Xaml.Controls.Primitives.ToggleButton)(target);
                    #line 55 "..\..\..\Views\FeedView.xaml"
                    ((global::Windows.UI.Xaml.Controls.Primitives.ToggleButton)element3).Click += this.ToggleButton_Toggled;
                    #line default
                }
                break;
            case 7:
                {
                    this.FeedErrorMessage = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 10:
                {
                    this.ArticlesListView = (global::UITReader.Controls.NavMenuListView)(target);
                    #line 221 "..\..\..\Views\FeedView.xaml"
                    ((global::UITReader.Controls.NavMenuListView)this.ArticlesListView).ItemClick += this.ArticlesListView_ItemClick;
                    #line default
                }
                break;
            case 12:
                {
                    this.FavoritesIsEmptyMessage = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 15:
                {
                    this.RefreshFeed = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 109 "..\..\..\Views\FeedView.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.RefreshFeed).Click += this.RefreshFeed_Click;
                    #line default
                }
                break;
            case 16:
                {
                    this.RemoveFeed = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 115 "..\..\..\Views\FeedView.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.RemoveFeed).Click += this.RemoveFeed_Click;
                    #line default
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    FeedView_obj1_Bindings bindings = new FeedView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 2:
                {
                    global::Windows.UI.Xaml.Controls.Grid element2 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    FeedView_obj2_Bindings bindings = new FeedView_obj2_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::UITReader.ViewModels.ArticleViewModel) element2.DataContext);
                    element2.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element2, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}


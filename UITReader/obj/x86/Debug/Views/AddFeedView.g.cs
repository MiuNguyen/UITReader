#pragma checksum "E:\Tài liệu môn học\Năm 3 - HKII\Chuyên đề mobile\UIT READER\UIT READER\UITReader\Views\AddFeedView.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "F3AE201F1F9C11AE5F859804EC8985A3"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UITReader.Views
{
    partial class AddFeedView : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ProgressBar_IsIndeterminate(global::Windows.UI.Xaml.Controls.ProgressBar obj, global::System.Boolean value)
            {
                obj.IsIndeterminate = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        private class AddFeedView_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IAddFeedView_Bindings
        {
            private global::UITReader.Views.AddFeedView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBox obj3;
            private global::Windows.UI.Xaml.Controls.ProgressBar obj4;
            private global::Windows.UI.Xaml.Controls.Grid obj5;
            private global::Windows.UI.Xaml.Controls.TextBox obj6;
            private global::Windows.UI.Xaml.Controls.Grid obj7;
            private global::Windows.UI.Xaml.Documents.Run obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;

            private AddFeedView_obj1_BindingsTracking bindingsTracking;

            public AddFeedView_obj1_Bindings()
            {
                this.bindingsTracking = new AddFeedView_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3:
                        this.obj3 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj3).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ViewModel.CurrentFeed.LinkAsString = (this.obj3).Text;
                                }
                            };
                        break;
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.ProgressBar)target;
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 6:
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj6).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ViewModel.CurrentFeed.Name = (this.obj6).Text;
                                }
                            };
                        break;
                    case 7:
                        this.obj7 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 8:
                        this.obj8 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            // IAddFeedView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // AddFeedView_obj1_Bindings

            public void SetDataRoot(global::UITReader.Views.AddFeedView newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UITReader.Views.AddFeedView obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                        this.Update_NameOfFeedJustAdded(obj.NameOfFeedJustAdded, phase);
                    }
                }
            }
            private void Update_ViewModel(global::UITReader.ViewModels.MainViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CurrentFeed(obj.CurrentFeed, phase);
                        this.Update_ViewModel_IsFeedAddedMessageShowing(obj.IsFeedAddedMessageShowing, phase);
                    }
                }
            }
            private void Update_ViewModel_CurrentFeed(global::UITReader.ViewModels.FeedViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_CurrentFeed(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_CurrentFeed_LinkAsString(obj.LinkAsString, phase);
                        this.Update_ViewModel_CurrentFeed_IsLoading(obj.IsLoading, phase);
                        this.Update_ViewModel_CurrentFeed_IsInError(obj.IsInError, phase);
                        this.Update_ViewModel_CurrentFeed_Name(obj.Name, phase);
                        this.Update_ViewModel_CurrentFeed_ErrorMessage(obj.ErrorMessage, phase);
                    }
                }
            }
            private void Update_ViewModel_CurrentFeed_LinkAsString(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj3, obj, null);
                }
            }
            private void Update_ViewModel_CurrentFeed_IsLoading(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ProgressBar_IsIndeterminate(this.obj4, obj);
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_CurrentFeed_IsInError(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj5, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ViewModel_CurrentFeed_Name(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj6, obj, null);
                }
            }
            private void Update_ViewModel_IsFeedAddedMessageShowing(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj7, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_NameOfFeedJustAdded(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj8, obj, null);
                }
            }
            private void Update_ViewModel_CurrentFeed_ErrorMessage(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                }
            }

            private class AddFeedView_obj1_BindingsTracking
            {
                global::System.WeakReference<AddFeedView_obj1_Bindings> WeakRefToBindingObj; 

                public AddFeedView_obj1_BindingsTracking(AddFeedView_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<AddFeedView_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_CurrentFeed(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AddFeedView_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::UITReader.Views.AddFeedView obj = sender as global::UITReader.Views.AddFeedView;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                                    bindings.Update_NameOfFeedJustAdded(obj.NameOfFeedJustAdded, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ViewModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NameOfFeedJustAdded":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_NameOfFeedJustAdded(obj.NameOfFeedJustAdded, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::UITReader.Views.AddFeedView obj)
                {
                    AddFeedView_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AddFeedView_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::UITReader.ViewModels.MainViewModel obj = sender as global::UITReader.ViewModels.MainViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ViewModel_CurrentFeed(obj.CurrentFeed, DATA_CHANGED);
                                    bindings.Update_ViewModel_IsFeedAddedMessageShowing(obj.IsFeedAddedMessageShowing, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CurrentFeed":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed(obj.CurrentFeed, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsFeedAddedMessageShowing":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsFeedAddedMessageShowing(obj.IsFeedAddedMessageShowing, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UITReader.ViewModels.MainViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::UITReader.ViewModels.MainViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_CurrentFeed(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AddFeedView_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::UITReader.ViewModels.FeedViewModel obj = sender as global::UITReader.ViewModels.FeedViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ViewModel_CurrentFeed_LinkAsString(obj.LinkAsString, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentFeed_IsLoading(obj.IsLoading, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentFeed_IsInError(obj.IsInError, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentFeed_Name(obj.Name, DATA_CHANGED);
                                    bindings.Update_ViewModel_CurrentFeed_ErrorMessage(obj.ErrorMessage, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "LinkAsString":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_LinkAsString(obj.LinkAsString, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsLoading":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_IsLoading(obj.IsLoading, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsInError":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_IsInError(obj.IsInError, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Name":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_Name(obj.Name, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ErrorMessage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_CurrentFeed_ErrorMessage(obj.ErrorMessage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UITReader.ViewModels.FeedViewModel cache_ViewModel_CurrentFeed = null;
                public void UpdateChildListeners_ViewModel_CurrentFeed(global::UITReader.ViewModels.FeedViewModel obj)
                {
                    if (obj != cache_ViewModel_CurrentFeed)
                    {
                        if (cache_ViewModel_CurrentFeed != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_CurrentFeed).PropertyChanged -= PropertyChanged_ViewModel_CurrentFeed;
                            cache_ViewModel_CurrentFeed = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_CurrentFeed = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_CurrentFeed;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.AddRSSHelp = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 3:
                {
                    this.LinkTextBox = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                    #line 61 "..\..\..\Views\AddFeedView.xaml"
                    ((global::Windows.UI.Xaml.Controls.TextBox)this.LinkTextBox).KeyDown += this.LinkTextBox_KeyDown;
                    #line default
                }
                break;
            case 6:
                {
                    this.NameTextBox = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                    #line 95 "..\..\..\Views\AddFeedView.xaml"
                    ((global::Windows.UI.Xaml.Controls.TextBox)this.NameTextBox).KeyDown += this.NameTextBox_KeyDown;
                    #line default
                }
                break;
            case 9:
                {
                    this.SaveAndLeaveButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 108 "..\..\..\Views\AddFeedView.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.SaveAndLeaveButton).Click += this.SaveAndLeaveButton_Click;
                    #line default
                }
                break;
            case 10:
                {
                    this.SaveAndStayButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 115 "..\..\..\Views\AddFeedView.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.SaveAndStayButton).Click += this.SaveAndStayButton_Click;
                    #line default
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    AddFeedView_obj1_Bindings bindings = new AddFeedView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

